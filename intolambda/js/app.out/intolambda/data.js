// Compiled by ClojureScript 1.7.228 {:static-fns true, :optimize-constants true}
goog.provide('intolambda.data');
goog.require('cljs.core');
intolambda.data.opened_registration_QMARK_ = false;
/**
 * List of all speakers and their details. :avatar is the name of the speaker's picture saved in /images/speakers/ folder. E.g. joedoe for /images/speakers/joedoe.png.
 */
intolambda.data.speaker_list = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$niste_DASH_date_DASH_dummy,cljs.core.cst$kw$in_DASH_interior], null),new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$name,"Alexandru Gherega",cljs.core.cst$kw$desc,"Clojure enthusiast",cljs.core.cst$kw$avatar,"0a53-alex-gherega_424242.jpg",cljs.core.cst$kw$link,"http://www.icslab.eu"], null),new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$name,"Speaker",cljs.core.cst$kw$desc,"Join as speaker",cljs.core.cst$kw$avatar,"joedoe-f.png",cljs.core.cst$kw$link,"#contributors"], null)], null);
/**
 * List of all sponsors and their details. :avatar is the name of the sponsor's brand image / logo saved in /images/sponsors/ folder. 
 */
intolambda.data.sponsor_list = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$ndd,cljs.core.cst$kw$in_DASH_interior], null),new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$name,"s1",cljs.core.cst$kw$id,"icslab",cljs.core.cst$kw$avatar,"logo-1-fb.png",cljs.core.cst$kw$link,"http://www.icslab.eu",cljs.core.cst$kw$tooltip,"icslab.eu"], null),new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$name,"s2",cljs.core.cst$kw$id,"new-sponsor",cljs.core.cst$kw$avatar,"joedoe-d.png",cljs.core.cst$kw$link,"#contributors",cljs.core.cst$kw$tooltip,"Become a sponsor!"], null)], null);
intolambda.data.registration_form_fields = new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$field_DASH_name,"name",cljs.core.cst$kw$field_DASH_type,"text",cljs.core.cst$kw$pattern,"[A-Za-z\\s]+",cljs.core.cst$kw$err_DASH_msg,"invalid name"], null),new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$field_DASH_name,"email",cljs.core.cst$kw$field_DASH_type,"text",cljs.core.cst$kw$pattern,"[A-Za-z0-9_@\\.]+",cljs.core.cst$kw$err_DASH_msg,"invalid email address"], null),new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$field_DASH_name,"phone",cljs.core.cst$kw$field_DASH_type,"text",cljs.core.cst$kw$pattern,"[0-9]{10,}",cljs.core.cst$kw$err_DASH_msg,"e.g. 07XXXXXXXX"], null),new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$field_DASH_name,"solution",cljs.core.cst$kw$field_DASH_type,"text",cljs.core.cst$kw$validator,"[A-Za-z0-9]+",cljs.core.cst$kw$err_DASH_msg,"please input solution"], null)], null);
intolambda.data.contribution_roles = new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, ["volunteer","speaker","sponsor","partner"], null);
intolambda.data.contribution_form_fields = new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$field_DASH_name,"name",cljs.core.cst$kw$field_DASH_type,"text",cljs.core.cst$kw$pattern,"[A-Za-z\\s]+",cljs.core.cst$kw$err_DASH_msg,"invalid name"], null),new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$field_DASH_name,"email",cljs.core.cst$kw$field_DASH_type,"text",cljs.core.cst$kw$pattern,"[A-Za-z0-9_@\\.]+",cljs.core.cst$kw$err_DASH_msg,"invalid email address"], null),new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$field_DASH_name,"phone",cljs.core.cst$kw$field_DASH_type,"text",cljs.core.cst$kw$pattern,"[0-9]{10,}",cljs.core.cst$kw$err_DASH_msg,"e.g. 07XXXXXXXX"], null),new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$field_DASH_name,"contribution",cljs.core.cst$kw$field_DASH_type,"text",cljs.core.cst$kw$validator,"[A-Za-z0-9]+",cljs.core.cst$kw$err_DASH_msg,"what's your contribution?",cljs.core.cst$kw$field_DASH_display,"textarea"], null)], null);
intolambda.data.initial_challenge_link = "http://www.icslab.eu/legal/codo-legal-terms.html";
intolambda.data.linkedin_share_content = new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$comment,"",cljs.core.cst$kw$content,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$title,"into lambda hackathon",cljs.core.cst$kw$description,"Fun Clojure hackathon",cljs.core.cst$kw$submitted_DASH_url,"TODO:add url",cljs.core.cst$kw$submitted_DASH_image_DASH_url,"TODO:add image"], null),cljs.core.cst$kw$visibility,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$code,"anyone"], null)], null);
intolambda.data.linkedin_post_link = "https://api.linkedin.com/v1/people/~/shares?format=json";
intolambda.data.facebook_post_link = "https://www.facebook.com/sharer/sharer.php?u=http%3A%2F%2Fwww.icslab.eu%2F&amp;src=sdkpreparse";
intolambda.data.twitter_post_link = "http://twitter.com/home?status=";
